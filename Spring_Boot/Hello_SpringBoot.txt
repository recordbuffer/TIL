> Spring Framework 스프링 프레임워크
프레임워크 : 개발에 필요한 뼈대를 제공하는 것, 미리 구현해놓은 라이브러리를 제공하는 것
  → 개발 시간 단축, 코드 재사용성 증가

> 스프링 주요 기능
- IoC / DI
빈 Bean : 스프링 컨테이너가 관리하는 객체
→  빈의 의존성 관리법
	① 의존 관계에 있는 객체들의 생성자 직접 호출 → 인스턴스화
	② 룩업 패턴으로 의존성 찾아 배치 →  생성자 / setter등 = IoC 

스프링 컨테이너 설정 → applicationContext.xml / 어노테이션

IoC (Inversion of Control) 제어 반전 : 객체들을 미리 선언하고 프레임워크에서 제어, 관리
DI (Dependency Injection) 의존성 주입 : 객체 설정 정보를 바탕으로 의존관계를 컨테이너에 주입

- 스프링 시큐리티 Spring Security
Authentication Manager 인증매니저
Authentication Provider : 인증매니저가 어떻게 동작해야 하는지 결정
UserDetailsService : 실제 최종 인증

필터 체이닝 : 여러개의 필터 구조로 Request 처리

→ 필터 등록 방법
    ① web.xml 파일에 <filter> <filter-mapping> 추가
    ② FilterRegistrationBean 만들어 설정클래스에 등록 

토큰 Token : 인증 관련 정보를 토큰 객체로 만들어 전달함 

스프링 시큐리티를 통한 로그인 과정

① 로그인 페이지에서 아이디 패스워드 입력
② 인증매니저가 Authentication Provider 찾아 인증 시도함 
    - 인증 : 올바른 사용자인 경우 Authentication 타입으로 전달
    - 인가 Autherization : 전달한 객체로 사용자가 적절한 권한이 있는지 확인
③ 로그인 성공 or 실패 반환

스프링 시큐리티 커스터마이징 
> PasswordEncoder : 패스워드 암호화하는 것 → BCrypPasswordEncoder 해시 이용
> fromLogin( ) : 인가/인증 절차에서 문제 발생시 로그인 화면으로 전환
> CSRF 설정

- Logback 기본 사용해 로깅 구현  
로그 : 프로그램 개발, 유지보수, 에러 확인에 사용되는 기록 파일
Log4j 라이브러리의 확장판 
 → 롬복으로 적용 가능

- 인터셉터 : 어떤 URI 호출 시 해당 요청 처리 전 혹은 후 작업을 위해 사용
인터셉터 vs 필터
        ① 인터셉터는 디스패처 서블릿과 컨트롤러 사이에 동작 / 필터는 디스패처 서블릿 앞 단에 동작
        ② 인터셉터에서는 스프링 빈 사용 가능 
        ③ 일반적으로 웹 전반 기능은 필터로 구현  → 문자열 인코딩 등 / 클라이언트 요청 관련 처리는 인터셉터로 처리  → 로그인, 인증, 권한 등

- AOP (Aspect Oriented Programming) 관점 지향 프로그래밍 / 횡단관심사
OOP (Object Oriented Programming) : 객체 지향 프로그래밍
	→ 객체, 캡슐화, 코드 재사용
    	→ AOP는 OOP를 더 OOP적으로 만들어줌
	→ 공통적으로 사용하는 기능(로그, 권한 체크, 인증, 예외 처리 등)을 하나의 클래스로 생성해 호출함
	→ 객체 단위가 아닌 기능의 관점 단위로 관리
	→ 다른 객체 호출 상관없이 기능에만 집중, 필요한 지점에 기능 직접 삽입

공통 기능 / 비즈니스 기능 따로 개발 후 비즈니스 로직 코드 사이에 공통 기능 코드 삽입
기본 용어
    → 관점 Aspect
    → 어드바이스 Advice : 특정 관심사를 처리하는 행동
    → 조인포인트 Joinpoint : 특정 프로그램이 실행되는 지점 → 메소드 호출
    → 포인트컷 Pointcut : 일치하는 여러 조인 포인트 결합한 것
    → 타깃 Target
    → 위빙 Weaving : 다른 필수 객체와 관점 연결해 어드바이스 객체 생성

- 트랜잭션 처리
① XML 설정
② @Transaction 어노테이션으로 설정
	→ @Configuration기반 파일에 transactionManager 등록 사용
	→ @Transactional 어노테이션 사용
③ AOP 설정

- 예외 처리
① try-catch로 예외처리
② @ExceptionHandler로 예외처리
③ @ControllerAdvice로 전역 예외처리
 
- 인코딩 필터 처리

> 스프링 vs 스프링부트
- 스프링은 POM.xml로 프로젝트 관리
	→ POM (Project Object Model) : 프로젝트 정보, 빌드 설정, 빌드 환경 등 기능 / XML 사용

- 스프링부트는 Maven, gradle을 빌드 배포 도구로 사용 

> 스프링 부트 Spring Boot
장점
① 자주 쓰는 라이브러리 미리 조합 → 최소한의 설정으로 바로 실행
② 내장 서버 미리 설치됨 → 톰켓
③ 바로 배포할 Jar 파일 제공

구조
- src / main / java : 자바 디렉터리 
	→ ProjectApplication 클래스 : 애플리케이션 구성, 실행 담당 → main 시작점
- resources 
	→ templates : view단
	→ static : 정적 리소스
	→ application.properties : 프로퍼티 정의
- build.gradle : gradle로 생성된 프로젝트 빌드 관리 / 빌드, 배포, 라이브러리 설정 

스프링부트 라이브러리
- Lombok : 클래스 생성시 getter, setter, toString 등 자동 생성해주는 라이브러리
- Junit : 테스트 코드 라이브러리


> REST
(REpresentational State Transfer) : 잘 표현된 HTTP URI로 리소스 정의하고 HTTP 메서드로 리소스 행위 정의

리소스 : 서비스를 제공하는 시스템의 자원 → REST는 리소스를 JSON, XML 등으로 정의
URI (Uniform Resource Indentifier)

URI 규칙
1. 명칭으로 직관적인 명사 사용 
2. / 슬래시는 계층관계 표현
3. URI 마지막에는 슬래시 사용 안함
4. URI는 소문자로만 작성
5. _ 사용 안함

HTTP 메서드
1. POST : create → 파라미터를 HTTP 패킷의 바디에 담아 전송 (@RequestBody)
2. GET : read → 파라미터를 요청 주소에 담아 전송 (@RequestParam)
3. PUT : update
4. DELETE  : delete


> JPA
JPA (Java Persistence API) : 자바 객체와 DB 테이블간 매핑 처리하는 ORM 기술 표준 
= 객체지향을 자동으로 관계형 데이터베이스에 맞게 처리해주는 기법
→ SQL에 종속적인 개발 안해도 됨
→ 인터페이스 
→ 대표적인 구현체 하이버네이트

JPA 장점

1. 개발 편함 (객체 자동 생성)
2. DB에 독립적인 개발 가능
3. 유지보수 쉬움

스프링 데이터 JPA
: JPA를 스프링에서 쉽게 사용할 수 있도록 해주는 라이브러리
→ JPA Repostiory 제공 = 인터페이스 상속받아 규칙에 맞게 메서드 작성


스프링 데이터 JPA 기본 설정
- application.properties
- 빈 등록

쿼리 메서드
: 스프링 데이터 JPA는 규칙에 맞게 메서드 추가하면 그 메서드 이름대로 쿼리 생성

@Query  
: 쿼리 메서드로 표현하기 복잡하면 쿼리 직접 작성할 수 있음
→ JPQL 이나 그냥 SQL 사용

- JPQL
    - FROM 절에 검색하려는 엔티티 이름 사용함
    - [?숫자] 형식으로 파라미터 지정함
    - :[변수이름]으로 @Param 에 대응하는 파라미터 지정함
    - .[엔티티명]으로 파라미터 지정함
    - :#{ }로 빈 지정함

Querydsl : 동적 쿼리 처리 / 복잡한 조합(검색, 조인, 서브쿼리 등) 사용하는 경우 필요

