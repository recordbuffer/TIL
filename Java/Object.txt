
public class Object_Test_Account {
	public static void main(String[] args) {
		
		
		/* 객체 지향 프로그램 : class단위 프로그램
		 * class : 객체의 설계도
		 *      -> 멤버 변수 : 데이터의 상태 관리 
		 *      -> 메소드 (함수) : 데이터의 동작 / 처리 내용
		 *      
		 * 객체 지향 프로그래밍 특징 : 추상화 / 캡슐화 / 상속 / 다형성
		 */			
		
		
		//객체 생성
		Account a = new Account();
		Account b = new Account();
		
		//잔액 조회
		a.display();
		
		System.out.println();
		
		//100만원 입금
		a.in(1000000);
		a.display();

		System.out.println();

		
		//추가로 150만원 입금
		a.in(1500000);
		a.display();
	
		System.out.println();
		
		//50만원 출금
		a.out(500000);
		a.display();
		
	}

//------------------------------------------------------------------------------------------------------

public class Account {
	//사람 하나의 계좌 정보 추상화하기
	//추상화 : 변수명(데이터 이름) + 자료형(데이터 타입)
	
//클래스 선언 -> 속성값 설정
	// [접근제한자][예약어] 자료형 변수명;
	private String name="홍길동";
	private String acc_No="112-2233-4567-8";
	private String pwd="1234";
	private int bankCode=20;
	private int balance=0;
	
	/*캡슐화 : 추상화를 통해 정리된 데이터들과 기능을 하나로 묶어 관리하는 기법
	*원칙 1. 멤버 변수에 대한 접근 제한 -> private 설정
	*원칙 2. 멤버 함수는 클래스 밖에서 접근 -> public 설정
	*/
	
	//생성자 : 객체를 생성하기 위한 일종의 메소드
	// [접근제한자] 생성자명() {}
	public Account() {}
	
	// -> 기능 설정
	/* [접근 제한자] 반환형 메소드명(매개변수) {
	*		기능 정의
	*	}
	*/
	
	//입금 기능
	public void in(int money) {
		if(money>0) {
			balance+=money;
			System.out.println(name+"님의 계좌에 "+money+"원이 입금되었습니다.");
		} else {
			System.out.println("오류");
		}
	}
	
	
	//출금 기능
	public void out(int money) {
		if(money<balance) {
			balance-=money;
			System.out.println(name+"님의 계좌에서 "+money+"원이 출금되었습니다.");
		} else {
			System.out.println("잔액이 부족합니다.");
		}
	}
	
	//잔액 조회 기능
	public void display() {
		System.out.println(name+"님의 계좌에 잔액은 "+balance+"원 입니다.");
	}

